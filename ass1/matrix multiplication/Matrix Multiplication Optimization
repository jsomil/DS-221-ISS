Matrix Multiplication Optimization :

Objective : Best program for multiplying 1024x1024 double martix.


Case 1 : 

Explanation :
Direct multiplication (multiplying element wise 1st row of a and 1st column of b and storing summation in c matrix 1st row 1st column)  using spatial locality of matrix a[1024][1024] and storing the result of a[1024][1024]*b[1024][1024] in c[1024][1024].

Program :


#include<stdio.h>
#include<stdlib.h>	    // random number generator
#include<math.h>            // Power function
#include<time.h>	   

double c[1024][1024];
double a[1024][1024];
double b[1024][1024];

void print(double arr[][1024]) {
	int i,j;
	for(i=0;i<1024;i++) {
		for(j=0;j<1024;j++) {
			printf("%f   ",arr[i][j]);	
		}
	printf("\n");
	}
}

void generate(double arr[][1024]) {
int i,j;	
	for(i=0;i<1024;i++) {
		for(j=0;j<1024;j++) {
			arr[i][j]=rand()%5;
		}
	}

}

void matrix_multiplication(double p[][1024],double q[][1024]) {
	int i,j,k,temp;
	for(i=0;i<1024;i++) {
		for(j=0;j<1024;j++) {
			temp=0;
			for (k=0;k<1024;k=k+1) {
				temp = temp + p[i][k]*q[k][j];
			}
			c[i][j]=temp;
		}
	}			
}


int main() {
	struct timespec begin,end; 
	int i,j,k,m,n;
	double total_time;
	srand(time(NULL));
	generate(a);
	generate(b);	
	clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&begin);
	printf("------------- Matrix Multiplication --------------------- \n");
	matrix_multiplication(a,b);
	clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&end);
	total_time=(end.tv_sec-begin.tv_sec)+(end.tv_nsec-begin.tv_nsec)*pow(10,-9);
	print(c);
	printf("Total execution time of program is %.12lf seconds. \n",total_time);
	return 0;
}



Execution Time : Total execution time of program is 15.726955816000 seconds.



Case 1 : Vectorization

Explanation : After vectorization of above code using command ( gcc -02 -ftree-vectorize -fopt-info-vec matrixmul.c ) not giving any feedback.Minor  change in time is due to random numbers taken as a input. 
	
Execution Time : Total execution time of program is 15.151781939000 seconds.



Case 2 :

Explanation : Using Spatial locality of both the matrix by taking the transpose of matrix b. Storing result of a[1024][1024]*b[1024][1024] in c[1024][1024] and then again taking the transpose of b to get actual b.( A new transpose(double int a[][1024]) is added to make use of spatial locality of both )

Program :

#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>

double c[1024][1024];
double a[1024][1024];
double b[1024][1024];

void print(double arr[][1024]) {
	int i,j;
	for(i=0;i<1024;i++) {
		for(j=0;j<1024;j++) {
			printf("%f   ",arr[i][j]);	
		}
	printf("\n");
	}
}

void generate(double arr[][1024]) {
	int i,j;	
	for(i=0;i<1024;i++) {
		for(j=0;j<1024;j++) {
			arr[i][j]=rand()%5;
		}
	}

}

void transpose(double b[][1024]) {
	int i,j,temp;
	for(i=0;i<1024;i++) {
		for(j=i+1;j<1024 ;j++) {
			temp=b[i][j];
			b[i][j]=b[j][i];
			b[j][i]=temp;
		}
	}
}

void matrix_multiplication(double p[][1024],double q[][1024]) {
	int i,j,k,temp;
	for(i=0;i<1024;i++) {
		for(j=0;j<1024;j++) {
			temp=0;
			for (k=0;k<1024;k=k+1) {
				temp = temp + p[i][k]*q[j][k];
			}
			c[i][j]=temp;
		}
	}			
}


int main() {
	struct timespec begin,end; 
	int i,j,k,m,n;
	double total_time;
	srand(time(NULL));	
	generate(a);
	generate(b);	
	clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&begin);
	printf("------------- Matrix Multiplication --------------------- \n");
	transpose(b);
	matrix_multiplication(a,b);
	clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&end);
	transpose(b);
	total_time=(end.tv_sec-begin.tv_sec)+(end.tv_nsec-begin.tv_nsec)*pow(10,-9);
	print(c);
	printf("Total execution time of program is %.12lf seconds. \n",total_time);
	return 0;
}


Execution Time : Total execution time of program is 6.489959172000 seconds. (Time decreases due to spatial locality in both )


Case 2 : Vectorization

Explanation there is no feedback and time remains same.


