
Assignment#01
DS 221 Introduction to Scalable Systems

-Somil Jain 
(16071)

Q. a.out file information of Hello Program ?
Ans: command : stat                  
	 File Size =8304 bytes(66432 bits)
	 Executable and linkable format
     command : objdump -dw a.out | wc -l
	 Number of instruction executed=172


2.62 :Write  a  function int_shifts_are_arithmetic() that  yields  1  when  run  on  a machine that uses arithmetic right shifts for int’s,  and 0 otherwise. Your code should work on a machine with any word size. Test your code on several machines.

CODE :

#include<stdio.h>
int int_shifts_are_arithmetic() {
	unsigned int i=-7;
		return((i<<1)==-14);
}

int main() {
 int ans=int_shifts_are_arithmetic();
	printf("%d",ans);
}

OUTPUT :
	
Machine1:Ubuntu 16.04
~/Desktop$ gcc testing.c
~/Desktop$ ./a.out
1


Machine2:Windows 8.1
~/Desktop$ gcc testing.c
~/Desktop$ ./a.out
1


2.68 :Write code for a function with the following prototype:
/*
* Mask with least signficant n bits set to 1
* Examples:n=6-->0x2F,n=17-->0x1FFFF
* Assume 1 <= n <= w
*/
int lower_one_mask(int n);
Your  function  should  follow  the  bit-level  integer  coding  rules  (page  120).Be careful of the case n=w.

CODE: 

#include<stdio.h>

int lower_one_mask(int n) {
	int m=4294967295>>(32-n);
	printf("0x%X",m);
}

int main() {
	int n;
	printf("Enter the value of n \n");
	scanf("%d",&n);
	lower_one_mask(n);
}	

OUTPUT :

~/Desktop$ gcc testing2.c
~/Desktop$ ./a.out
Enter the value of n 
8
0xFF
~/Desktop$ ./a.out
Enter the value of n 
12
0xFFF
~/Desktop$ ./a.out
Enter the value of n 
5
0x1F 


2.69 : Write code for a function with the following prototype:
/*
* Do rotating left shift.  Assume 0 <=n<w
* Examples when x = 0x12345678 an
dw=32:
*    n=4 -> 0x23456781, n=20 -> 0x67812345
*/
unsigned rotate_left(unsigned x, int n);
Your  function  should  follow  the  bit-level  integer  coding  rules  (page  120).Be careful of the case n=0.

CODE :

#include<stdio.h>
unsigned rotate_left(unsigned x, int n) {
	int right_shift,left_shift;
	//printf("%d",sizeof(x));
	right_shift=x>>(sizeof(x)*8-n);
	left_shift=x<<n;
	printf("ox%X",left_shift|right_shift);
	return(1);
}

int main() {
	int n,k,x;
	printf("Enter the value of x and  n \n");
	scanf("%X",&x);
	scanf("%d",&n);
	rotate_left(x,n);
}


OUTPUT :

~/Desktop$ gcc rotation.c
~/Desktop$ ./a.out
Enter the value of x and n 
0000ffff
12
oxFFFF000

~/Desktop$ ./a.out
Enter the value of x and n 
0000fff0
4
oxFFF00

2.70 : Write code for the function with the following prototype:
/* * Return 1 when x can be represented as an n-bit,2’s complement * number; 0 otherwise * 
Assume 1 <= n <= w */
int fits_bits(int x, int n);
Your function should follow the bit-level integer coding rules (page 120).

#include<stdio.h>

#include<stdio.h>

int fits_bits(int x, int n) {
	int sign_bit = x>>(n-1);
	return(sign_bit==0|sign_bit==1);
}

int main() {
	int x,n,ans;
	printf("Enter the value of x and n");
	scanf("%d %d ",&x,&n);
	ans=fits_bits(x,n);
	printf("%d",ans);
}

OUTPUT:

~/Desktop$ gcc fit_bit.c
~/Desktop$ ./a.out
Enter the value of x and n 
2
3
1

