Assignment#02
DS 221 Introduction to Scalable Systems

-Somil Jain 
(16071)



2.82 ◆◆ Consider numbers having a binary representation consisting of an inﬁnite string of the form 0.y y y y y y..., where y is a k-bit sequence. 
For example, the binary representation of 1/3 is 0.01010101...(y =01), while the representation of 1/5 is 0.001100110011...(y =0011). 

A. Let Y =B2Uk(y), that is, the number having binary representation y. Give a formula in terms of Y and k for the value represented by the inﬁnite string. Hint:Consider the effect of shifting the binary point k positions to the right.
Ans : 	//pseudo code :
	sum=0 
	for(i=0;i<k;i++) {
		n=(y>>i)&1;
		sum = sum + n*Σ(2^-r*(k-i));
	}
	return sum;
	where r goes to 1 to infinity.
	

B. What is the numeric value of the string for the following values of y?
(a) 101
Ans : 5/7 
(b) 0110
Ans : 6/15 
(c) 010011
Ans : 19/63 


2.89 ◆ You have been assigned the task of writing a C function to compute a ﬂoating point representation of 2^x. You decide that the best way to do this is to directly construct the IEEE single-precision representation of the result. When x is too small,your routine will return 0.0 .When x is too large,it will return +∞ .Fill in the blank portions of the code that follows to compute the correct result. Assume the function u2f returns a ﬂoating-point value having an identical bit representation as its unsigned argument.

float fpwr2(int x) {
/* Result exponent and fraction */ 
unsigned exp, frac;
unsigned u;
if (x < 2^-149){ 
/* Too small. Return 0.0 */ 
exp =0 ;
frac=0 ; 
} 
else if (x < 1){
/* Denormalized result */ 
exp =0 ; frac =x<<9 ; 
}
else if (x < (2^24-1)*2^104 + 1){ 
/* Normalized result. */ 
exp =x>>23 ; frac =x<<9; 
}
 else {
/* Too big. Return +oo */ 
 exp =255 ; frac =0 ; 
 }
/* Pack exp and frac into 32 bits */
 u = exp << 23 | frac; 
/* Return as float  */
 return u2f(u);
}

2.90 ◆ Around 250 B.C.,the Greek mathematician Archimedes proved that 223/71 <π<22/7 . Had he had access to a computer and the standard library <math.h>,he would have been able to determine that the single-precision ﬂoating-point approximation of π has the hexadecimal representation 0x40490FDB.Of course,all of these are just approximations, since π is not rational.

A. What is the fractional binary number denoted by this ﬂoating-point value?
Ans:11.0010010000111111011010
 
B. What is the fractional binary representation of 22/7 ?
Hint:SeeProblem2.82.
Ans: 11.001001001...

C. At what bit position (relative to the binary point) do these two approximations to π diverge?
Ans: 9